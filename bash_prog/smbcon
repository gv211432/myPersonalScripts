#!/bin/bash

# ┏━┓┏┳┓┏┓ ┏━╸┏━┓┏┓╻┏┓╻┏━╸┏━╸╺┳╸
# ┗━┓┃┃┃┣┻┓┃  ┃ ┃┃┗┫┃┗┫┣╸ ┃   ┃
# ┗━┛╹ ╹┗━┛┗━╸┗━┛╹ ╹╹ ╹┗━╸┗━╸ ╹

# generating space before any operation
echo

# old working code ======> don't alter
# this code only connects to the device offering gateway

# ip=($(allhost | grep _gateway))
# reNewIp=${ip[5]}
# no=$((${#reNewIp}))-2
# myip=${reNewIp}
# reqIp=${myip:1:${no}}
# echo "Connecting to the host ${reqIp}"
# echo ${ip}:1445
# nautilus -s smb://${reqIp}:1445
# echo $ips


# new more advance code which asks to connect the present ip addresses

allhost > /home/boss/Documents/myPersonalScripts/bash_prog/smb
# Example report:
# ====================================================================
# Starting Nmap 7.92 ( https://nmap.org ) at 2022-03-14 11:53 IST
# Nmap scan report for 192.168.221.109
# Host is up (0.050s latency).
# Nmap scan report for _gateway (192.168.221.180)
# Host is up (0.0047s latency).
# Nmap scan report for fedora35 (192.168.221.229)
# Host is up (0.00021s latency).
# Nmap done: 256 IP addresses (3 hosts up) scanned in 17.43 seconds
# ====================================================================

# this will extract the connected ip address generated by "napm host scanning"
# there will be two arrays one with host name and one without host names
ips1=($(grep -o '[^(]192.168.\w*.\w*' /home/boss/Documents/myPersonalScripts/bash_prog/smb))
ips2=($(grep -o '\w*\s[(]192.168.\w*.\w*[)]' /home/boss/Documents/myPersonalScripts/bash_prog/smb))

# creating an empty array to store the ip-addresses in it
pureArrayOfIPs=()


# ====================================================================
# declaring and index for first array(without names) to operate and track
index=0
for x in ${ips1[@]}
do
    pureArrayOfIPs+=( "$x" )    # pusing the ip-add in the pure IP address array
    printf " $x"    # printing the ip-address with breces
    num=$((${#ips1[index]}))    # printing the lenght of the pure IP address array size and it will be current's ip index
    # echo $num
    
    # this loop generate a padding space till 30 characters to print the option numbers
    while [[ $num -le 30 ]]
    do
        printf " "      # printing extra space for alining the option numbers
        let num=num+1   # also incrementing the index num
    done
    
    echo " ==> ${#pureArrayOfIPs[@]}" | lolcat -r
    
    let index=index+1
done

# ====================================================================
# updating(reseting) index for sencond array(with names) to operate and track
index=0
for x in ${ips2[@]}
do
    # all ips and names are in same array
    # to operate on only ip-addresses, it maching first 3 numbers with 192 to prove that it is an IP
    if [[ ${x:1:3} -eq 192 ]]
    then
        xLength=$((${#x}-2))    # removing the braces present in the ip-add
        # echo $xLength
        pureArrayOfIPs+=( "${x:1:$xLength}" )   # removed the braces and pushed in the pure IP address array
        
        printf ${ips2[index-1]} #printing the previous array element which is hostname of this ip-add
        printf " $x"    # printing the ip-address with breces
        num=$((${#ips2[index-1]}+${#ips2[index]}))  # printing the lenght of the pure IP address array size and it will be current's ip index
        # echo $num
        
        # this loop generate a padding space till 30 characters to print the option numbers
        while [[ $num -le 30 ]]
        do
            printf " "      # printing extra space for alining the option numbers
            let num=num+1   # also incrementing the index num
        done
        
        echo " ==> ${#pureArrayOfIPs[@]}" | lolcat -r
        
    fi
    let index=index+1
done

# ====================================================================
echo
printf "Select an IP-address where SMB server is running : "    # telling to select an ip-adderess
read gotIp  # getting an input form the user
# echo $gotIp

# printing all the present ip in the pure IP address array for checking and debugging
# for x in ${!pureArrayOfIPs[@]}
# do
#     echo ${pureArrayOfIPs[$x]}
# done

printf "Connecting to the host "
printf ${pureArrayOfIPs[gotIp-1]} | lolcat -r
echo ${ip}:1445 | lolcat -r
echo


nautilus -s smb://${pureArrayOfIPs[gotIp-1]}:1445 # opening the smb-ip-add in the nautilus app(default gnome filemanager)
# [this is different for other linux distributions]